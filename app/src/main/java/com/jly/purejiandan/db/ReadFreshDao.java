package com.jly.purejiandan.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "READ_FRESH".
*/
public class ReadFreshDao extends AbstractDao<ReadFresh, Void> {

    public static final String TABLENAME = "READ_FRESH";

    /**
     * Properties of entity ReadFresh.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FreshId = new Property(0, Integer.class, "freshId", false, "FRESH_ID");
    };


    public ReadFreshDao(DaoConfig config) {
        super(config);
    }
    
    public ReadFreshDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READ_FRESH\" (" + //
                "\"FRESH_ID\" INTEGER);"); // 0: freshId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READ_FRESH\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReadFresh entity) {
        stmt.clearBindings();
 
        Integer freshId = entity.getFreshId();
        if (freshId != null) {
            stmt.bindLong(1, freshId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ReadFresh readEntity(Cursor cursor, int offset) {
        ReadFresh entity = new ReadFresh( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0) // freshId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReadFresh entity, int offset) {
        entity.setFreshId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ReadFresh entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ReadFresh entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
